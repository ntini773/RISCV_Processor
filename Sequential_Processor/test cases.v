performing operation on two numbers stored in memory, 
operations are add, sub, and, or

// prerequisite
x2 will contain the address of the memory
x2[0] and x2[1] have the numerical values stored on which the operation to be performed

// this will load the value from memory to register
ld x5, 0(x2)
ld x6, 1(x2)

// now performing operations on x5 and x6
add x10, x5, x6
sub x11, x5, x6
and x12, x5, x6
or x13, x5, x6

// now writing this back to the memory
sd x10 2(x2)
sd x11 3(x2)
sd x12 4(x2)
sd x13 5(x2)


// assembly language CODE
ld x5, 0(x2)
ld x6, 1(x2)
add x10, x5, x6
sub x11, x5, x6
and x12, x5, x6
or x13, x5, x6
sd x10 2(x2)
sd x11 3(x2)
sd x12 4(x2)
sd x13 5(x2)

// machine code in 32 bits
000000000000 00010 000 00101 0000011
000000000001 00010 000 00110 0000011

0000000 00101 00110 000 01010 0110011
0100000 00101 00110 000 01011 0110011
0000000 00101 00110 111 01100 0110011
0000000 00101 00110 110 01101 0110011

0000000 01010 00010 000 00010 0100011
0000000 01011 00010 000 00011 0100011
0000000 01100 00010 000 00100 0100011
0000000 01101 00010 000 00101 0100011


// machine code without space
00000000000000010000001010000011
00000000000100010000001100000011
00000000010100110000010100110011
01000000010100110000010110110011
00000000010100110111011000110011
00000000010100110110011010110011
00000000101000010000000100100011
00000000101100010000000110100011
00000000110000010000001000100011
00000000110100010000001010100011